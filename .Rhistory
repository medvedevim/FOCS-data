library("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("lattice")
install.packages("lattice")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp, order = as.numeric(as.character(Thickness)))+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))
require(tools)
require(stringr)
require(ggplot2)
ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp, order = as.numeric(as.character(Thickness)))+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))
ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp, order = as.numeric(as.character(Thickness)))+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))
knitr::opts_chunk$set(echo = TRUE)
require(tools)
require(stringr)
require(ggplot2)
load(file=".RData")
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с"))
}
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с") +scale_y_continuous(name="Относительное \n отражение"))
}
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с") +scale_y_continuous(name="Относительное \n отражение")+guide_legend(title = "Толщина \n покрытия, нм"))
}
knitr::opts_chunk$set(echo = TRUE)
require(tools)
require(stringr)
require(ggplot2)
load(file=".RData")
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с") +scale_y_continuous(name="Относительное \n отражение"))
}
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с") +scale_y_continuous(name="Относительное \n отражение")+guide_legend(title = "Толщина \n покрытия, нм"))
}
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500), name="Время, с") +scale_y_continuous(name="Относительное \n отражение"))
}
tt <- tmp[which(tmp$Thickness=="5000"),]
plot(tt)
tt <- tmp[which(tmp$Thickness=="5000"),]
plot(tt$Time, tt$Reflection)
install.packages("numDeriv")
library("numDeriv", lib.loc="C:/Program Files/R/R-3.2.0/library")
tt <- tmp[which(tmp$Thickness=="5000"),]
plot(tt$Time, grad(tt$Reflection))
install.packages("pspline")
predict(sm.spline(tt$Thickness, tt$Reflection), tt$Time, 1)
library("pspline", lib.loc="C:/Program Files/R/R-3.2.0/library")
predict(sm.spline(tt$Thickness, tt$Reflection), tt$Time, 1)
predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
library(grid)
library(gridExtra)
tt <- gdata[which(gdata$Thickness=="5000" & gdata=="Amg3"),]
p1 <- plot(tt$Time, tt$Reflection)
p2 <- plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
grid.arrange(p1,p2, ncol=1, nrow=2)
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
p1 <- plot(tt$Time, tt$Reflection)
p2 <- plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
grid.arrange(p1,p2, ncol=1, nrow=2)
par(mfrow=c(1,2))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
par(mfrow=c(2,1))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
par(mfrow=c(2,1))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="D16"),]
par(mfrow=c(2,1))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="D16"),]
par(mfrow=c(1,2))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
par(mfrow=c(1,2))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
#par(mfrow=c(1,2))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
par(mfrow=c(1,1))
plot(tt$Time, tt$Reflection)
plot(predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1))
deriv<-predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1)
max(deriv)
max(abs(deriv))
which.max(abs(deriv))
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14)))+ ggtitle(i)
}
require(tools)
require(stringr)
require(ggplot2)
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14)))+ ggtitle(i)
}
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ ggtitle(i))
}
nrow(tt)
deriv<-predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1)
tt <- tt[which.max(abs(deriv)):nrow(deriv),]
require(tools)
require(stringr)
require(ggplot2)
library("pspline", lib.loc="C:/Program Files/R/R-3.2.0/library")
deriv<-predict(sm.spline(tt$Time, tt$Reflection), tt$Time, 1)
tt <- tt[which.max(abs(deriv)):nrow(deriv),]
plot(tt)
plot(tt$Time, tt$Reflection)
tt$Reflection
which(tt$Reflection<1e-04)
which(tt$Reflection<1e-05)
which(tt$Reflection<1e-03)
which(tt$Reflection<1e-03)[1]
tt[which(tt$Reflection<1e-03)[1],"Time"]
tt <- gdata[which(gdata$Thickness=="5000" & gdata$Alloy=="Amg3"),]
plot(tt$Time, tt$Reflection)
round(1.2,1)
round(1.2,0)
round(1.32,1)
round(1.32,3)
round(1.32,4)
find_equilibrium <- function(dataframe, roundv){
deriv <- predict(sm.spline(dataframe$Time, dataframe$Reflection), dataframe$Time, 1)
max_deriv <- which.max(abs(deriv))
tt <- dataframe[max_deriv:nrow(deriv),]
return(round(tt[which(tt$Reflection<1e-03)[1],"Time"], roundv))
}
find_equilibrium(gdata[which(gdata$Alloy=="D16" & gdata$Thickness=="5000"),], 0)
find_equilibrium(gdata[which(gdata$Alloy=="D16" & gdata$Thickness=="5000"),], 1)
find_equilibrium(gdata[which(gdata$Alloy=="D16" & gdata$Thickness=="5000"),], 0)
find_equilibrium(gdata[which(gdata$Alloy=="Amg3" & gdata$Thickness=="5000"),], 0)
length(levels(gdata$Thickness))
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = length(levels(gdata$Thickness))))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- tt[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = length(levels(gdata$Thickness))))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness)[1])
{
tt <- tt[which(gdata$Thickness==f & gdata$Alloy==i)[1],]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
tt <- tt[which(gdata$Thickness==f & gdata$Alloy==i)[1],]
tt <- tt[which(gdata$Thickness==f & gdata$Alloy==i),]
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = length(levels(gdata$Thickness))))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness)[1])
{
tt <- tt[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
find_equilibrium(tt,0)
find_equilibrium(tt,0)
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = length(levels(gdata$Thickness))))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness)[1])
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
find_equilibrium(tt,0)
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
View(eqtable)
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = length(levels(gdata$Thickness))))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
#eqtable <- rbind(eqtable, c(i,foo))
}
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
c(i,foo)
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
eqtable <- rbind(eqtable, c(i,foo))
eqtable <- rbind(eqtable, c(i,foo))
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
}
View(eqtable)
eqtable <- rbind(eqtable, c(i,foo))
c("Alloy", levels(gdata$Thickness))
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,foo))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
View(eqtable)
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
#  names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
eqtable <- data.frame(matrix(NA, nrow = 5, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
View(eqtable)
eqtable <- data.frame(matrix(NA, nrow = 1, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
View(eqtable)
eqtable <- data.frame(matrix(NA, nrow = 1, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(as.character(i),as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
eqtable <- data.frame(matrix(NA, nrow = 0, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(as.character(i),as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
eqtable <- data.frame(matrix(NA, nrow = 1, ncol = (length(levels(gdata$Thickness))+1)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
for (i in levels(gdata$Alloy))
{
foo <- c()
for (f in levels(gdata$Thickness))
{
tt <- gdata[which(gdata$Thickness==f & gdata$Alloy==i),]
foo <- cbind(foo, find_equilibrium(tt,0))
}
eqtable <- rbind(eqtable, c(i,as.numeric(foo)))
names(eqtable) <- c("Alloy", levels(gdata$Thickness))
}
View(eqtable)
unlink('report_Inversion-S_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
require(tools)
require(stringr)
require(ggplot2)
require(pspline)
load(file=".RData")
for (i in levels(gdata$Alloy))
{
tmp <- gdata[which(gdata$Alloy==i),]
print(ggplot(aes(x=Time, y=Reflection, shape=Thickness), data = tmp)+
geom_point()+geom_path()+theme_bw()+
theme(text = element_text(size=14))+ggtitle(i)+scale_x_continuous(limits=c(0,3500)))
}
library(rmarkdown)
render("report_Inversion-S.Rmd.Rmd", output_format = "word_document")
library(rmarkdown)
render("report_Inversion-S.Rmd", output_format = "word_document")
library(rmarkdown)
render("report_Inversion-S.Rmd", output_format = "rtf_document ")
library(rmarkdown)
render("report_Inversion-S.Rmd", output_format = "rtf_document")
require(tools)
require(stringr)
require(ggplot2)
require(pspline)
to.read = file("NaCl 3% D16 300 nm_01.01.09_02.02.57.dat", "rb")
# counting number of frames in file
nframes=file.info(rfile)$size/1024
# read file to array of unsigned integers
tdata<-readBin(to.read, integer(),size=2, n = nframes*512, endian = "little", signed = FALSE)
rfile="NaCl 3% D16 300 nm_01.01.09_02.02.57.dat"
to.read = file(rfile, "rb")
# counting number of frames in file
nframes=file.info(rfile)$size/1024
# read file to array of unsigned integers
tdata<-readBin(to.read, integer(),size=2, n = nframes*512, endian = "little", signed = FALSE)
# reshape data to 512xN matrix
dim(tdata) <- c(512, nframes)
tdata <- t(tdata)
close(to.read)
to.read = file(rfile, "rb")
# counting number of frames in file
nframes=file.info(rfile)$size/1024
# read file to array of unsigned integers
tdata<-readBin(to.read, integer(),size=2, n = nframes*512, endian = "little", signed = FALSE)
close(to.read)
plot(tdata[1:100])
plot(tdata[1:512])
plot(tdata[1:1024])
plot(tdata[1:20148])
plot(tdata[1:2048])
nframes
plot((nframes-4)*2:nframes)
plot((nframes-4)*2:nframes)
plot(tdata[(nframes-4)*2:nframes])
plot(tdata[(nframes-4)*2:nframes*2])
plot(tdata[(nframes-4):nframes])
plot(tdata[(nframes-4)*512:nframes*512])
plot(tdata[(nframes-4)*128:nframes*128])
file.info(rfile)$size
plot(tdata[1:2048])
plot(tdata[1:128])
plot(tdata[1:256])
to.read = file(rfile, "rb")
# counting number of frames in file
nframes=file.info(rfile)$size/1024
# read file to array of unsigned integers
tdata<-readBin(to.read, integer(),size=4, n = nframes*512, endian = "little", signed = FALSE)
close(to.read)
plot(tdata[1:256])
to.read = file(rfile, "rb")
# counting number of frames in file
nframes=file.info(rfile)$size/1024
# read file to array of unsigned integers
tdata<-readBin(to.read, integer(),size=2, n = nframes*512, endian = "little", signed = FALSE)
close(to.read)
plot(tdata)
plot(tdata[512:1024])
plot(tdata[which(tdata<3000)])
plot(tdata[which(tdata<2000)])
tdata[which(tdata<2000)]
tdata[which(tdata<3000)]
which(tdata<3000)
which(tdata<4000)
which(tdata<10000)
plot(tdata[which(tdata<10000)])
plot(tdata[which(tdata<8000)])
plot(tdata[which(tdata<5000)])
plot(tdata[which(tdata<4000)])
plot(tdata[which(tdata<5000)])
plot(tdata[which(tdata<4900)])
plot(tdata[10000:10005])
plot(tdata[10000:100512])
plot(tdata[10000:10512])
nframes
plot(tdata[(nframes-10)*512:nframes*512])
nrow(tdata)
nrows(tdata)
length(tdata)
plot(tdata[50000000:50000384])
